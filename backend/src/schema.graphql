# import Query.users, Query.user, Query.usersConnection, Mutation.deleteUser, UserUpdateInput from "./generated/prisma.graphql"
# import Query.organizations, Query.organization, Query.organizationsConnection, Mutation.createOrganization, Mutation.updateOrganization, Mutation.deleteOrganization from "./generated/prisma.graphql"
# import Employment, Query.employments, Query.employmentsConnection, Mutation.deleteEmployment from "./generated/prisma.graphql"
# import Query.cards, Query.card, Query.cardsConnection, Mutation.createCard, Mutation.updateCard, Mutation.deleteCard from "./generated/prisma.graphql"
# import Query.restaurants, Query.restaurant, Query.restaurantsConnection, Mutation.createRestaurant, Mutation.updateRestaurant, Mutation.deleteRestaurant from "./generated/prisma.graphql"
# import Mutation.signupByInvite, Mutation.signup, Mutation.login, Mutation.changePassword, Mutation.updateCurrentUser, Mutation.triggerPasswordReset, Mutation.passwordReset, Mutation.confirmEmail, UserIdPayload from "../node_modules/@volst/prisma-auth/schema.graphql"

scalar Upload

type Query {
  currentUser: User
  generateRestaurantSlug(name: String!): GenerateSlugPayload!
  generateOrganizationSlug(name: String!): GenerateSlugPayload!
}

type Mutation {
  inviteUser(data: InviteUserInput): UserIdPayload!
  imageUpload(file: Upload!): UploadPayload!
}

input InviteUserInput {
  email: String!
  restaurantId: ID!
  permission: RestaurantPermission!
}

type User {
  id: ID!
  email: String!
  name: String!
  inviteAccepted: Boolean!
  emailConfirmed: Boolean!
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean!
  employments(
    where: EmploymentWhereInput
    orderBy: EmploymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Employment!]
}

type GenerateSlugPayload {
  slug: String!
}

type UploadPayload {
  url: String!
}
