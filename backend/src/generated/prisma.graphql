# source: http://localhost:4466/foed/dev
# timestamp: Wed May 16 2018 12:35:41 GMT+0200 (CEST)

type AggregateCard {
  count: Int!
}

type AggregateCardCategory {
  count: Int!
}

type AggregateCardItem {
  count: Int!
}

type AggregateCardSubitem {
  count: Int!
}

type AggregateEmployment {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateRestaurant {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Card implements Node {
  id: ID!
  name: String!
  restaurant(where: RestaurantWhereInput): Restaurant!
  activeRestaurant(where: RestaurantWhereInput): Restaurant
  categories(
    where: CardCategoryWhereInput
    orderBy: CardCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CardCategory!]
}

type CardCategory implements Node {
  id: ID!
  name: String!
  ordering: Int!
  description: String!
  items(
    where: CardItemWhereInput
    orderBy: CardItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CardItem!]
}

"""
A connection to a list of items.
"""
type CardCategoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CardCategoryEdge]!
  aggregate: AggregateCardCategory!
}

input CardCategoryCreateInput {
  name: String!
  ordering: Int!
  description: String!
  items: CardItemCreateManyInput
}

input CardCategoryCreateManyInput {
  create: [CardCategoryCreateInput!]
  connect: [CardCategoryWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type CardCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: CardCategory!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CardCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ordering_ASC
  ordering_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CardCategoryPreviousValues {
  id: ID!
  name: String!
  ordering: Int!
  description: String!
}

type CardCategorySubscriptionPayload {
  mutation: MutationType!
  node: CardCategory
  updatedFields: [String!]
  previousValues: CardCategoryPreviousValues
}

input CardCategorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardCategorySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardCategorySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardCategoryWhereInput
}

input CardCategoryUpdateDataInput {
  name: String
  ordering: Int
  description: String
  items: CardItemUpdateManyInput
}

input CardCategoryUpdateInput {
  name: String
  ordering: Int
  description: String
  items: CardItemUpdateManyInput
}

input CardCategoryUpdateManyInput {
  create: [CardCategoryCreateInput!]
  connect: [CardCategoryWhereUniqueInput!]
  disconnect: [CardCategoryWhereUniqueInput!]
  delete: [CardCategoryWhereUniqueInput!]
  update: [CardCategoryUpdateWithWhereUniqueNestedInput!]
  upsert: [CardCategoryUpsertWithWhereUniqueNestedInput!]
}

input CardCategoryUpdateWithWhereUniqueNestedInput {
  where: CardCategoryWhereUniqueInput!
  data: CardCategoryUpdateDataInput!
}

input CardCategoryUpsertWithWhereUniqueNestedInput {
  where: CardCategoryWhereUniqueInput!
  update: CardCategoryUpdateDataInput!
  create: CardCategoryCreateInput!
}

input CardCategoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardCategoryWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardCategoryWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardCategoryWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  ordering: Int

  """
  All values that are not equal to given value.
  """
  ordering_not: Int

  """
  All values that are contained in given list.
  """
  ordering_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ordering_not_in: [Int!]

  """
  All values less than the given value.
  """
  ordering_lt: Int

  """
  All values less than or equal the given value.
  """
  ordering_lte: Int

  """
  All values greater than the given value.
  """
  ordering_gt: Int

  """
  All values greater than or equal the given value.
  """
  ordering_gte: Int
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  items_every: CardItemWhereInput
  items_some: CardItemWhereInput
  items_none: CardItemWhereInput
}

input CardCategoryWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type CardConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  name: String!
  restaurant: RestaurantCreateOneWithoutCardsInput!
  activeRestaurant: RestaurantCreateOneWithoutActiveCardInput
  categories: CardCategoryCreateManyInput
}

input CardCreateManyWithoutRestaurantInput {
  create: [CardCreateWithoutRestaurantInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateOneWithoutActiveRestaurantInput {
  create: CardCreateWithoutActiveRestaurantInput
  connect: CardWhereUniqueInput
}

input CardCreateWithoutActiveRestaurantInput {
  name: String!
  restaurant: RestaurantCreateOneWithoutCardsInput!
  categories: CardCategoryCreateManyInput
}

input CardCreateWithoutRestaurantInput {
  name: String!
  activeRestaurant: RestaurantCreateOneWithoutActiveCardInput
  categories: CardCategoryCreateManyInput
}

"""
An edge in a connection.
"""
type CardEdge {
  """
  The item at the end of the edge.
  """
  node: Card!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type CardItem implements Node {
  id: ID!
  name: String!
  description: String!
  ordering: Int!
  price: Float!
  subitems(
    where: CardSubitemWhereInput
    orderBy: CardSubitemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CardSubitem!]
}

"""
A connection to a list of items.
"""
type CardItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CardItemEdge]!
  aggregate: AggregateCardItem!
}

input CardItemCreateInput {
  name: String!
  description: String!
  ordering: Int!
  price: Float!
  subitems: CardSubitemCreateManyInput
}

input CardItemCreateManyInput {
  create: [CardItemCreateInput!]
  connect: [CardItemWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type CardItemEdge {
  """
  The item at the end of the edge.
  """
  node: CardItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CardItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  ordering_ASC
  ordering_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CardItemPreviousValues {
  id: ID!
  name: String!
  description: String!
  ordering: Int!
  price: Float!
}

type CardItemSubscriptionPayload {
  mutation: MutationType!
  node: CardItem
  updatedFields: [String!]
  previousValues: CardItemPreviousValues
}

input CardItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardItemWhereInput
}

input CardItemUpdateDataInput {
  name: String
  description: String
  ordering: Int
  price: Float
  subitems: CardSubitemUpdateManyInput
}

input CardItemUpdateInput {
  name: String
  description: String
  ordering: Int
  price: Float
  subitems: CardSubitemUpdateManyInput
}

input CardItemUpdateManyInput {
  create: [CardItemCreateInput!]
  connect: [CardItemWhereUniqueInput!]
  disconnect: [CardItemWhereUniqueInput!]
  delete: [CardItemWhereUniqueInput!]
  update: [CardItemUpdateWithWhereUniqueNestedInput!]
  upsert: [CardItemUpsertWithWhereUniqueNestedInput!]
}

input CardItemUpdateWithWhereUniqueNestedInput {
  where: CardItemWhereUniqueInput!
  data: CardItemUpdateDataInput!
}

input CardItemUpsertWithWhereUniqueNestedInput {
  where: CardItemWhereUniqueInput!
  update: CardItemUpdateDataInput!
  create: CardItemCreateInput!
}

input CardItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  ordering: Int

  """
  All values that are not equal to given value.
  """
  ordering_not: Int

  """
  All values that are contained in given list.
  """
  ordering_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ordering_not_in: [Int!]

  """
  All values less than the given value.
  """
  ordering_lt: Int

  """
  All values less than or equal the given value.
  """
  ordering_lte: Int

  """
  All values greater than the given value.
  """
  ordering_gt: Int

  """
  All values greater than or equal the given value.
  """
  ordering_gte: Int
  price: Float

  """
  All values that are not equal to given value.
  """
  price_not: Float

  """
  All values that are contained in given list.
  """
  price_in: [Float!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Float!]

  """
  All values less than the given value.
  """
  price_lt: Float

  """
  All values less than or equal the given value.
  """
  price_lte: Float

  """
  All values greater than the given value.
  """
  price_gt: Float

  """
  All values greater than or equal the given value.
  """
  price_gte: Float
  subitems_every: CardSubitemWhereInput
  subitems_some: CardSubitemWhereInput
  subitems_none: CardSubitemWhereInput
}

input CardItemWhereUniqueInput {
  id: ID
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CardPreviousValues {
  id: ID!
  name: String!
}

type CardSubitem implements Node {
  id: ID!
  type: CardSubitemTypes!
  name: String!
  ordering: Int!
  price: Float!
}

"""
A connection to a list of items.
"""
type CardSubitemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CardSubitemEdge]!
  aggregate: AggregateCardSubitem!
}

input CardSubitemCreateInput {
  type: CardSubitemTypes!
  name: String!
  ordering: Int!
  price: Float!
}

input CardSubitemCreateManyInput {
  create: [CardSubitemCreateInput!]
  connect: [CardSubitemWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type CardSubitemEdge {
  """
  The item at the end of the edge.
  """
  node: CardSubitem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CardSubitemOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  ordering_ASC
  ordering_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CardSubitemPreviousValues {
  id: ID!
  type: CardSubitemTypes!
  name: String!
  ordering: Int!
  price: Float!
}

type CardSubitemSubscriptionPayload {
  mutation: MutationType!
  node: CardSubitem
  updatedFields: [String!]
  previousValues: CardSubitemPreviousValues
}

input CardSubitemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardSubitemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardSubitemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardSubitemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardSubitemWhereInput
}

enum CardSubitemTypes {
  ADDITION
  VARIANT
}

input CardSubitemUpdateDataInput {
  type: CardSubitemTypes
  name: String
  ordering: Int
  price: Float
}

input CardSubitemUpdateInput {
  type: CardSubitemTypes
  name: String
  ordering: Int
  price: Float
}

input CardSubitemUpdateManyInput {
  create: [CardSubitemCreateInput!]
  connect: [CardSubitemWhereUniqueInput!]
  disconnect: [CardSubitemWhereUniqueInput!]
  delete: [CardSubitemWhereUniqueInput!]
  update: [CardSubitemUpdateWithWhereUniqueNestedInput!]
  upsert: [CardSubitemUpsertWithWhereUniqueNestedInput!]
}

input CardSubitemUpdateWithWhereUniqueNestedInput {
  where: CardSubitemWhereUniqueInput!
  data: CardSubitemUpdateDataInput!
}

input CardSubitemUpsertWithWhereUniqueNestedInput {
  where: CardSubitemWhereUniqueInput!
  update: CardSubitemUpdateDataInput!
  create: CardSubitemCreateInput!
}

input CardSubitemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardSubitemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardSubitemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardSubitemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: CardSubitemTypes

  """
  All values that are not equal to given value.
  """
  type_not: CardSubitemTypes

  """
  All values that are contained in given list.
  """
  type_in: [CardSubitemTypes!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [CardSubitemTypes!]
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  ordering: Int

  """
  All values that are not equal to given value.
  """
  ordering_not: Int

  """
  All values that are contained in given list.
  """
  ordering_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ordering_not_in: [Int!]

  """
  All values less than the given value.
  """
  ordering_lt: Int

  """
  All values less than or equal the given value.
  """
  ordering_lte: Int

  """
  All values greater than the given value.
  """
  ordering_gt: Int

  """
  All values greater than or equal the given value.
  """
  ordering_gte: Int
  price: Float

  """
  All values that are not equal to given value.
  """
  price_not: Float

  """
  All values that are contained in given list.
  """
  price_in: [Float!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Float!]

  """
  All values less than the given value.
  """
  price_lt: Float

  """
  All values less than or equal the given value.
  """
  price_lte: Float

  """
  All values greater than the given value.
  """
  price_gt: Float

  """
  All values greater than or equal the given value.
  """
  price_gte: Float
}

input CardSubitemWhereUniqueInput {
  id: ID
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardWhereInput
}

input CardUpdateInput {
  name: String
  restaurant: RestaurantUpdateOneWithoutCardsInput
  activeRestaurant: RestaurantUpdateOneWithoutActiveCardInput
  categories: CardCategoryUpdateManyInput
}

input CardUpdateManyWithoutRestaurantInput {
  create: [CardCreateWithoutRestaurantInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutRestaurantInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutRestaurantInput!]
}

input CardUpdateOneWithoutActiveRestaurantInput {
  create: CardCreateWithoutActiveRestaurantInput
  connect: CardWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CardUpdateWithoutActiveRestaurantDataInput
  upsert: CardUpsertWithoutActiveRestaurantInput
}

input CardUpdateWithoutActiveRestaurantDataInput {
  name: String
  restaurant: RestaurantUpdateOneWithoutCardsInput
  categories: CardCategoryUpdateManyInput
}

input CardUpdateWithoutRestaurantDataInput {
  name: String
  activeRestaurant: RestaurantUpdateOneWithoutActiveCardInput
  categories: CardCategoryUpdateManyInput
}

input CardUpdateWithWhereUniqueWithoutRestaurantInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutRestaurantDataInput!
}

input CardUpsertWithoutActiveRestaurantInput {
  update: CardUpdateWithoutActiveRestaurantDataInput!
  create: CardCreateWithoutActiveRestaurantInput!
}

input CardUpsertWithWhereUniqueWithoutRestaurantInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutRestaurantDataInput!
  create: CardCreateWithoutRestaurantInput!
}

input CardWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CardWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CardWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CardWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  restaurant: RestaurantWhereInput
  activeRestaurant: RestaurantWhereInput
  categories_every: CardCategoryWhereInput
  categories_some: CardCategoryWhereInput
  categories_none: CardCategoryWhereInput
}

input CardWhereUniqueInput {
  id: ID
}

scalar DateTime

type Employment implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  restaurant(where: RestaurantWhereInput): Restaurant!
  permission: RestaurantPermission!
}

"""
A connection to a list of items.
"""
type EmploymentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [EmploymentEdge]!
  aggregate: AggregateEmployment!
}

input EmploymentCreateInput {
  permission: RestaurantPermission!
  user: UserCreateOneWithoutEmploymentsInput!
  restaurant: RestaurantCreateOneWithoutEmploymentsInput!
}

input EmploymentCreateManyWithoutRestaurantInput {
  create: [EmploymentCreateWithoutRestaurantInput!]
  connect: [EmploymentWhereUniqueInput!]
}

input EmploymentCreateManyWithoutUserInput {
  create: [EmploymentCreateWithoutUserInput!]
  connect: [EmploymentWhereUniqueInput!]
}

input EmploymentCreateWithoutRestaurantInput {
  permission: RestaurantPermission!
  user: UserCreateOneWithoutEmploymentsInput!
}

input EmploymentCreateWithoutUserInput {
  permission: RestaurantPermission!
  restaurant: RestaurantCreateOneWithoutEmploymentsInput!
}

"""
An edge in a connection.
"""
type EmploymentEdge {
  """
  The item at the end of the edge.
  """
  node: Employment!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EmploymentOrderByInput {
  id_ASC
  id_DESC
  permission_ASC
  permission_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmploymentPreviousValues {
  id: ID!
  permission: RestaurantPermission!
}

type EmploymentSubscriptionPayload {
  mutation: MutationType!
  node: Employment
  updatedFields: [String!]
  previousValues: EmploymentPreviousValues
}

input EmploymentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EmploymentSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [EmploymentSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EmploymentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmploymentWhereInput
}

input EmploymentUpdateInput {
  permission: RestaurantPermission
  user: UserUpdateOneWithoutEmploymentsInput
  restaurant: RestaurantUpdateOneWithoutEmploymentsInput
}

input EmploymentUpdateManyWithoutRestaurantInput {
  create: [EmploymentCreateWithoutRestaurantInput!]
  connect: [EmploymentWhereUniqueInput!]
  disconnect: [EmploymentWhereUniqueInput!]
  delete: [EmploymentWhereUniqueInput!]
  update: [EmploymentUpdateWithWhereUniqueWithoutRestaurantInput!]
  upsert: [EmploymentUpsertWithWhereUniqueWithoutRestaurantInput!]
}

input EmploymentUpdateManyWithoutUserInput {
  create: [EmploymentCreateWithoutUserInput!]
  connect: [EmploymentWhereUniqueInput!]
  disconnect: [EmploymentWhereUniqueInput!]
  delete: [EmploymentWhereUniqueInput!]
  update: [EmploymentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EmploymentUpsertWithWhereUniqueWithoutUserInput!]
}

input EmploymentUpdateWithoutRestaurantDataInput {
  permission: RestaurantPermission
  user: UserUpdateOneWithoutEmploymentsInput
}

input EmploymentUpdateWithoutUserDataInput {
  permission: RestaurantPermission
  restaurant: RestaurantUpdateOneWithoutEmploymentsInput
}

input EmploymentUpdateWithWhereUniqueWithoutRestaurantInput {
  where: EmploymentWhereUniqueInput!
  data: EmploymentUpdateWithoutRestaurantDataInput!
}

input EmploymentUpdateWithWhereUniqueWithoutUserInput {
  where: EmploymentWhereUniqueInput!
  data: EmploymentUpdateWithoutUserDataInput!
}

input EmploymentUpsertWithWhereUniqueWithoutRestaurantInput {
  where: EmploymentWhereUniqueInput!
  update: EmploymentUpdateWithoutRestaurantDataInput!
  create: EmploymentCreateWithoutRestaurantInput!
}

input EmploymentUpsertWithWhereUniqueWithoutUserInput {
  where: EmploymentWhereUniqueInput!
  update: EmploymentUpdateWithoutUserDataInput!
  create: EmploymentCreateWithoutUserInput!
}

input EmploymentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EmploymentWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [EmploymentWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EmploymentWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  permission: RestaurantPermission

  """
  All values that are not equal to given value.
  """
  permission_not: RestaurantPermission

  """
  All values that are contained in given list.
  """
  permission_in: [RestaurantPermission!]

  """
  All values that are not contained in given list.
  """
  permission_not_in: [RestaurantPermission!]
  user: UserWhereInput
  restaurant: RestaurantWhereInput
}

input EmploymentWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createOrganization(data: OrganizationCreateInput!): Organization!
  createRestaurant(data: RestaurantCreateInput!): Restaurant!
  createEmployment(data: EmploymentCreateInput!): Employment!
  createUser(data: UserCreateInput!): User!
  createCard(data: CardCreateInput!): Card!
  createCardCategory(data: CardCategoryCreateInput!): CardCategory!
  createCardItem(data: CardItemCreateInput!): CardItem!
  createCardSubitem(data: CardSubitemCreateInput!): CardSubitem!
  updateOrganization(
    data: OrganizationUpdateInput!
    where: OrganizationWhereUniqueInput!
  ): Organization
  updateRestaurant(
    data: RestaurantUpdateInput!
    where: RestaurantWhereUniqueInput!
  ): Restaurant
  updateEmployment(
    data: EmploymentUpdateInput!
    where: EmploymentWhereUniqueInput!
  ): Employment
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateCardCategory(
    data: CardCategoryUpdateInput!
    where: CardCategoryWhereUniqueInput!
  ): CardCategory
  updateCardItem(
    data: CardItemUpdateInput!
    where: CardItemWhereUniqueInput!
  ): CardItem
  updateCardSubitem(
    data: CardSubitemUpdateInput!
    where: CardSubitemWhereUniqueInput!
  ): CardSubitem
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteEmployment(where: EmploymentWhereUniqueInput!): Employment
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteCardCategory(where: CardCategoryWhereUniqueInput!): CardCategory
  deleteCardItem(where: CardItemWhereUniqueInput!): CardItem
  deleteCardSubitem(where: CardSubitemWhereUniqueInput!): CardSubitem
  upsertOrganization(
    where: OrganizationWhereUniqueInput!
    create: OrganizationCreateInput!
    update: OrganizationUpdateInput!
  ): Organization!
  upsertRestaurant(
    where: RestaurantWhereUniqueInput!
    create: RestaurantCreateInput!
    update: RestaurantUpdateInput!
  ): Restaurant!
  upsertEmployment(
    where: EmploymentWhereUniqueInput!
    create: EmploymentCreateInput!
    update: EmploymentUpdateInput!
  ): Employment!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  upsertCard(
    where: CardWhereUniqueInput!
    create: CardCreateInput!
    update: CardUpdateInput!
  ): Card!
  upsertCardCategory(
    where: CardCategoryWhereUniqueInput!
    create: CardCategoryCreateInput!
    update: CardCategoryUpdateInput!
  ): CardCategory!
  upsertCardItem(
    where: CardItemWhereUniqueInput!
    create: CardItemCreateInput!
    update: CardItemUpdateInput!
  ): CardItem!
  upsertCardSubitem(
    where: CardSubitemWhereUniqueInput!
    create: CardSubitemCreateInput!
    update: CardSubitemUpdateInput!
  ): CardSubitem!
  updateManyOrganizations(
    data: OrganizationUpdateInput!
    where: OrganizationWhereInput
  ): BatchPayload!
  updateManyRestaurants(
    data: RestaurantUpdateInput!
    where: RestaurantWhereInput
  ): BatchPayload!
  updateManyEmployments(
    data: EmploymentUpdateInput!
    where: EmploymentWhereInput
  ): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyCards(data: CardUpdateInput!, where: CardWhereInput): BatchPayload!
  updateManyCardCategories(
    data: CardCategoryUpdateInput!
    where: CardCategoryWhereInput
  ): BatchPayload!
  updateManyCardItems(
    data: CardItemUpdateInput!
    where: CardItemWhereInput
  ): BatchPayload!
  updateManyCardSubitems(
    data: CardSubitemUpdateInput!
    where: CardSubitemWhereInput
  ): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyRestaurants(where: RestaurantWhereInput): BatchPayload!
  deleteManyEmployments(where: EmploymentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCards(where: CardWhereInput): BatchPayload!
  deleteManyCardCategories(where: CardCategoryWhereInput): BatchPayload!
  deleteManyCardItems(where: CardItemWhereInput): BatchPayload!
  deleteManyCardSubitems(where: CardSubitemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Organization implements Node {
  id: ID!
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  restaurants(
    where: RestaurantWhereInput
    orderBy: RestaurantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Restaurant!]
}

"""
A connection to a list of items.
"""
type OrganizationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  restaurants: RestaurantCreateManyWithoutOrganizationInput
}

input OrganizationCreateOneWithoutRestaurantsInput {
  create: OrganizationCreateWithoutRestaurantsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutRestaurantsInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  The item at the end of the edge.
  """
  node: Organization!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  visible_ASC
  visible_DESC
  imageUrl_ASC
  imageUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrganizationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrganizationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrganizationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
  restaurants: RestaurantUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateOneWithoutRestaurantsInput {
  create: OrganizationCreateWithoutRestaurantsInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateWithoutRestaurantsDataInput
  upsert: OrganizationUpsertWithoutRestaurantsInput
}

input OrganizationUpdateWithoutRestaurantsDataInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
}

input OrganizationUpsertWithoutRestaurantsInput {
  update: OrganizationUpdateWithoutRestaurantsDataInput!
  create: OrganizationCreateWithoutRestaurantsInput!
}

input OrganizationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrganizationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrganizationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrganizationWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  visible: Boolean

  """
  All values that are not equal to given value.
  """
  visible_not: Boolean
  imageUrl: String

  """
  All values that are not equal to given value.
  """
  imageUrl_not: String

  """
  All values that are contained in given list.
  """
  imageUrl_in: [String!]

  """
  All values that are not contained in given list.
  """
  imageUrl_not_in: [String!]

  """
  All values less than the given value.
  """
  imageUrl_lt: String

  """
  All values less than or equal the given value.
  """
  imageUrl_lte: String

  """
  All values greater than the given value.
  """
  imageUrl_gt: String

  """
  All values greater than or equal the given value.
  """
  imageUrl_gte: String

  """
  All values containing the given string.
  """
  imageUrl_contains: String

  """
  All values not containing the given string.
  """
  imageUrl_not_contains: String

  """
  All values starting with the given string.
  """
  imageUrl_starts_with: String

  """
  All values not starting with the given string.
  """
  imageUrl_not_starts_with: String

  """
  All values ending with the given string.
  """
  imageUrl_ends_with: String

  """
  All values not ending with the given string.
  """
  imageUrl_not_ends_with: String
  restaurants_every: RestaurantWhereInput
  restaurants_some: RestaurantWhereInput
  restaurants_none: RestaurantWhereInput
}

input OrganizationWhereUniqueInput {
  id: ID
  slug: String
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  organizations(
    where: OrganizationWhereInput
    orderBy: OrganizationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Organization]!
  restaurants(
    where: RestaurantWhereInput
    orderBy: RestaurantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Restaurant]!
  employments(
    where: EmploymentWhereInput
    orderBy: EmploymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Employment]!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  cards(
    where: CardWhereInput
    orderBy: CardOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Card]!
  cardCategories(
    where: CardCategoryWhereInput
    orderBy: CardCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CardCategory]!
  cardItems(
    where: CardItemWhereInput
    orderBy: CardItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CardItem]!
  cardSubitems(
    where: CardSubitemWhereInput
    orderBy: CardSubitemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CardSubitem]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  employment(where: EmploymentWhereUniqueInput!): Employment
  user(where: UserWhereUniqueInput!): User
  card(where: CardWhereUniqueInput!): Card
  cardCategory(where: CardCategoryWhereUniqueInput!): CardCategory
  cardItem(where: CardItemWhereUniqueInput!): CardItem
  cardSubitem(where: CardSubitemWhereUniqueInput!): CardSubitem
  organizationsConnection(
    where: OrganizationWhereInput
    orderBy: OrganizationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrganizationConnection!
  restaurantsConnection(
    where: RestaurantWhereInput
    orderBy: RestaurantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RestaurantConnection!
  employmentsConnection(
    where: EmploymentWhereInput
    orderBy: EmploymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): EmploymentConnection!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  cardsConnection(
    where: CardWhereInput
    orderBy: CardOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CardConnection!
  cardCategoriesConnection(
    where: CardCategoryWhereInput
    orderBy: CardCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CardCategoryConnection!
  cardItemsConnection(
    where: CardItemWhereInput
    orderBy: CardItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CardItemConnection!
  cardSubitemsConnection(
    where: CardSubitemWhereInput
    orderBy: CardSubitemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CardSubitemConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Restaurant implements Node {
  id: ID!
  organization(where: OrganizationWhereInput): Organization
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  employments(
    where: EmploymentWhereInput
    orderBy: EmploymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Employment!]
  activeCard(where: CardWhereInput): Card
  cards(
    where: CardWhereInput
    orderBy: CardOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Card!]
}

"""
A connection to a list of items.
"""
type RestaurantConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RestaurantEdge]!
  aggregate: AggregateRestaurant!
}

input RestaurantCreateInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  organization: OrganizationCreateOneWithoutRestaurantsInput
  employments: EmploymentCreateManyWithoutRestaurantInput
  activeCard: CardCreateOneWithoutActiveRestaurantInput
  cards: CardCreateManyWithoutRestaurantInput
}

input RestaurantCreateManyWithoutOrganizationInput {
  create: [RestaurantCreateWithoutOrganizationInput!]
  connect: [RestaurantWhereUniqueInput!]
}

input RestaurantCreateOneWithoutActiveCardInput {
  create: RestaurantCreateWithoutActiveCardInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateOneWithoutCardsInput {
  create: RestaurantCreateWithoutCardsInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateOneWithoutEmploymentsInput {
  create: RestaurantCreateWithoutEmploymentsInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateWithoutActiveCardInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  organization: OrganizationCreateOneWithoutRestaurantsInput
  employments: EmploymentCreateManyWithoutRestaurantInput
  cards: CardCreateManyWithoutRestaurantInput
}

input RestaurantCreateWithoutCardsInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  organization: OrganizationCreateOneWithoutRestaurantsInput
  employments: EmploymentCreateManyWithoutRestaurantInput
  activeCard: CardCreateOneWithoutActiveRestaurantInput
}

input RestaurantCreateWithoutEmploymentsInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  organization: OrganizationCreateOneWithoutRestaurantsInput
  activeCard: CardCreateOneWithoutActiveRestaurantInput
  cards: CardCreateManyWithoutRestaurantInput
}

input RestaurantCreateWithoutOrganizationInput {
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
  employments: EmploymentCreateManyWithoutRestaurantInput
  activeCard: CardCreateOneWithoutActiveRestaurantInput
  cards: CardCreateManyWithoutRestaurantInput
}

"""
An edge in a connection.
"""
type RestaurantEdge {
  """
  The item at the end of the edge.
  """
  node: Restaurant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RestaurantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  visible_ASC
  visible_DESC
  imageUrl_ASC
  imageUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

enum RestaurantPermission {
  EMPLOYEE
  ADMIN
  OWNER
}

type RestaurantPreviousValues {
  id: ID!
  name: String!
  slug: String!
  visible: Boolean
  imageUrl: String
}

type RestaurantSubscriptionPayload {
  mutation: MutationType!
  node: Restaurant
  updatedFields: [String!]
  previousValues: RestaurantPreviousValues
}

input RestaurantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RestaurantSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RestaurantSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RestaurantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RestaurantWhereInput
}

input RestaurantUpdateInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
  organization: OrganizationUpdateOneWithoutRestaurantsInput
  employments: EmploymentUpdateManyWithoutRestaurantInput
  activeCard: CardUpdateOneWithoutActiveRestaurantInput
  cards: CardUpdateManyWithoutRestaurantInput
}

input RestaurantUpdateManyWithoutOrganizationInput {
  create: [RestaurantCreateWithoutOrganizationInput!]
  connect: [RestaurantWhereUniqueInput!]
  disconnect: [RestaurantWhereUniqueInput!]
  delete: [RestaurantWhereUniqueInput!]
  update: [RestaurantUpdateWithWhereUniqueWithoutOrganizationInput!]
  upsert: [RestaurantUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input RestaurantUpdateOneWithoutActiveCardInput {
  create: RestaurantCreateWithoutActiveCardInput
  connect: RestaurantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RestaurantUpdateWithoutActiveCardDataInput
  upsert: RestaurantUpsertWithoutActiveCardInput
}

input RestaurantUpdateOneWithoutCardsInput {
  create: RestaurantCreateWithoutCardsInput
  connect: RestaurantWhereUniqueInput
  delete: Boolean
  update: RestaurantUpdateWithoutCardsDataInput
  upsert: RestaurantUpsertWithoutCardsInput
}

input RestaurantUpdateOneWithoutEmploymentsInput {
  create: RestaurantCreateWithoutEmploymentsInput
  connect: RestaurantWhereUniqueInput
  delete: Boolean
  update: RestaurantUpdateWithoutEmploymentsDataInput
  upsert: RestaurantUpsertWithoutEmploymentsInput
}

input RestaurantUpdateWithoutActiveCardDataInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
  organization: OrganizationUpdateOneWithoutRestaurantsInput
  employments: EmploymentUpdateManyWithoutRestaurantInput
  cards: CardUpdateManyWithoutRestaurantInput
}

input RestaurantUpdateWithoutCardsDataInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
  organization: OrganizationUpdateOneWithoutRestaurantsInput
  employments: EmploymentUpdateManyWithoutRestaurantInput
  activeCard: CardUpdateOneWithoutActiveRestaurantInput
}

input RestaurantUpdateWithoutEmploymentsDataInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
  organization: OrganizationUpdateOneWithoutRestaurantsInput
  activeCard: CardUpdateOneWithoutActiveRestaurantInput
  cards: CardUpdateManyWithoutRestaurantInput
}

input RestaurantUpdateWithoutOrganizationDataInput {
  name: String
  slug: String
  visible: Boolean
  imageUrl: String
  employments: EmploymentUpdateManyWithoutRestaurantInput
  activeCard: CardUpdateOneWithoutActiveRestaurantInput
  cards: CardUpdateManyWithoutRestaurantInput
}

input RestaurantUpdateWithWhereUniqueWithoutOrganizationInput {
  where: RestaurantWhereUniqueInput!
  data: RestaurantUpdateWithoutOrganizationDataInput!
}

input RestaurantUpsertWithoutActiveCardInput {
  update: RestaurantUpdateWithoutActiveCardDataInput!
  create: RestaurantCreateWithoutActiveCardInput!
}

input RestaurantUpsertWithoutCardsInput {
  update: RestaurantUpdateWithoutCardsDataInput!
  create: RestaurantCreateWithoutCardsInput!
}

input RestaurantUpsertWithoutEmploymentsInput {
  update: RestaurantUpdateWithoutEmploymentsDataInput!
  create: RestaurantCreateWithoutEmploymentsInput!
}

input RestaurantUpsertWithWhereUniqueWithoutOrganizationInput {
  where: RestaurantWhereUniqueInput!
  update: RestaurantUpdateWithoutOrganizationDataInput!
  create: RestaurantCreateWithoutOrganizationInput!
}

input RestaurantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RestaurantWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RestaurantWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RestaurantWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  visible: Boolean

  """
  All values that are not equal to given value.
  """
  visible_not: Boolean
  imageUrl: String

  """
  All values that are not equal to given value.
  """
  imageUrl_not: String

  """
  All values that are contained in given list.
  """
  imageUrl_in: [String!]

  """
  All values that are not contained in given list.
  """
  imageUrl_not_in: [String!]

  """
  All values less than the given value.
  """
  imageUrl_lt: String

  """
  All values less than or equal the given value.
  """
  imageUrl_lte: String

  """
  All values greater than the given value.
  """
  imageUrl_gt: String

  """
  All values greater than or equal the given value.
  """
  imageUrl_gte: String

  """
  All values containing the given string.
  """
  imageUrl_contains: String

  """
  All values not containing the given string.
  """
  imageUrl_not_contains: String

  """
  All values starting with the given string.
  """
  imageUrl_starts_with: String

  """
  All values not starting with the given string.
  """
  imageUrl_not_starts_with: String

  """
  All values ending with the given string.
  """
  imageUrl_ends_with: String

  """
  All values not ending with the given string.
  """
  imageUrl_not_ends_with: String
  organization: OrganizationWhereInput
  employments_every: EmploymentWhereInput
  employments_some: EmploymentWhereInput
  employments_none: EmploymentWhereInput
  activeCard: CardWhereInput
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
}

input RestaurantWhereUniqueInput {
  id: ID
  slug: String
}

type Subscription {
  organization(
    where: OrganizationSubscriptionWhereInput
  ): OrganizationSubscriptionPayload
  restaurant(
    where: RestaurantSubscriptionWhereInput
  ): RestaurantSubscriptionPayload
  employment(
    where: EmploymentSubscriptionWhereInput
  ): EmploymentSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  cardCategory(
    where: CardCategorySubscriptionWhereInput
  ): CardCategorySubscriptionPayload
  cardItem(where: CardItemSubscriptionWhereInput): CardItemSubscriptionPayload
  cardSubitem(
    where: CardSubitemSubscriptionWhereInput
  ): CardSubitemSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean!
  emailConfirmed: Boolean!
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean!
  employments(
    where: EmploymentWhereInput
    orderBy: EmploymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Employment!]
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean
  employments: EmploymentCreateManyWithoutUserInput
}

input UserCreateOneWithoutEmploymentsInput {
  create: UserCreateWithoutEmploymentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmploymentsInput {
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  inviteToken_ASC
  inviteToken_DESC
  inviteAccepted_ASC
  inviteAccepted_DESC
  emailConfirmed_ASC
  emailConfirmed_DESC
  emailConfirmToken_ASC
  emailConfirmToken_DESC
  resetToken_ASC
  resetToken_DESC
  resetExpires_ASC
  resetExpires_DESC
  deletedAt_ASC
  deletedAt_DESC
  lastLogin_ASC
  lastLogin_DESC
  joinedAt_ASC
  joinedAt_DESC
  isSuper_ASC
  isSuper_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean!
  emailConfirmed: Boolean!
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime
  isSuper: Boolean
  employments: EmploymentUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutEmploymentsInput {
  create: UserCreateWithoutEmploymentsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutEmploymentsDataInput
  upsert: UserUpsertWithoutEmploymentsInput
}

input UserUpdateWithoutEmploymentsDataInput {
  email: String
  password: String
  name: String
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime
  isSuper: Boolean
}

input UserUpsertWithoutEmploymentsInput {
  update: UserUpdateWithoutEmploymentsDataInput!
  create: UserCreateWithoutEmploymentsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  inviteToken: String

  """
  All values that are not equal to given value.
  """
  inviteToken_not: String

  """
  All values that are contained in given list.
  """
  inviteToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  inviteToken_not_in: [String!]

  """
  All values less than the given value.
  """
  inviteToken_lt: String

  """
  All values less than or equal the given value.
  """
  inviteToken_lte: String

  """
  All values greater than the given value.
  """
  inviteToken_gt: String

  """
  All values greater than or equal the given value.
  """
  inviteToken_gte: String

  """
  All values containing the given string.
  """
  inviteToken_contains: String

  """
  All values not containing the given string.
  """
  inviteToken_not_contains: String

  """
  All values starting with the given string.
  """
  inviteToken_starts_with: String

  """
  All values not starting with the given string.
  """
  inviteToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  inviteToken_ends_with: String

  """
  All values not ending with the given string.
  """
  inviteToken_not_ends_with: String
  inviteAccepted: Boolean

  """
  All values that are not equal to given value.
  """
  inviteAccepted_not: Boolean
  emailConfirmed: Boolean

  """
  All values that are not equal to given value.
  """
  emailConfirmed_not: Boolean
  emailConfirmToken: String

  """
  All values that are not equal to given value.
  """
  emailConfirmToken_not: String

  """
  All values that are contained in given list.
  """
  emailConfirmToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  emailConfirmToken_not_in: [String!]

  """
  All values less than the given value.
  """
  emailConfirmToken_lt: String

  """
  All values less than or equal the given value.
  """
  emailConfirmToken_lte: String

  """
  All values greater than the given value.
  """
  emailConfirmToken_gt: String

  """
  All values greater than or equal the given value.
  """
  emailConfirmToken_gte: String

  """
  All values containing the given string.
  """
  emailConfirmToken_contains: String

  """
  All values not containing the given string.
  """
  emailConfirmToken_not_contains: String

  """
  All values starting with the given string.
  """
  emailConfirmToken_starts_with: String

  """
  All values not starting with the given string.
  """
  emailConfirmToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  emailConfirmToken_ends_with: String

  """
  All values not ending with the given string.
  """
  emailConfirmToken_not_ends_with: String
  resetToken: String

  """
  All values that are not equal to given value.
  """
  resetToken_not: String

  """
  All values that are contained in given list.
  """
  resetToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  resetToken_not_in: [String!]

  """
  All values less than the given value.
  """
  resetToken_lt: String

  """
  All values less than or equal the given value.
  """
  resetToken_lte: String

  """
  All values greater than the given value.
  """
  resetToken_gt: String

  """
  All values greater than or equal the given value.
  """
  resetToken_gte: String

  """
  All values containing the given string.
  """
  resetToken_contains: String

  """
  All values not containing the given string.
  """
  resetToken_not_contains: String

  """
  All values starting with the given string.
  """
  resetToken_starts_with: String

  """
  All values not starting with the given string.
  """
  resetToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  resetToken_ends_with: String

  """
  All values not ending with the given string.
  """
  resetToken_not_ends_with: String
  resetExpires: DateTime

  """
  All values that are not equal to given value.
  """
  resetExpires_not: DateTime

  """
  All values that are contained in given list.
  """
  resetExpires_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  resetExpires_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  resetExpires_lt: DateTime

  """
  All values less than or equal the given value.
  """
  resetExpires_lte: DateTime

  """
  All values greater than the given value.
  """
  resetExpires_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  resetExpires_gte: DateTime
  deletedAt: DateTime

  """
  All values that are not equal to given value.
  """
  deletedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  deletedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  deletedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  deletedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  deletedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  deletedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  deletedAt_gte: DateTime
  lastLogin: DateTime

  """
  All values that are not equal to given value.
  """
  lastLogin_not: DateTime

  """
  All values that are contained in given list.
  """
  lastLogin_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  lastLogin_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  lastLogin_lt: DateTime

  """
  All values less than or equal the given value.
  """
  lastLogin_lte: DateTime

  """
  All values greater than the given value.
  """
  lastLogin_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  lastLogin_gte: DateTime
  joinedAt: DateTime

  """
  All values that are not equal to given value.
  """
  joinedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  joinedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  joinedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  joinedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  joinedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  joinedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  joinedAt_gte: DateTime
  isSuper: Boolean

  """
  All values that are not equal to given value.
  """
  isSuper_not: Boolean
  employments_every: EmploymentWhereInput
  employments_some: EmploymentWhereInput
  employments_none: EmploymentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
